---
# Role default lower priority variables

# Product profile. Can be wso2am or wso2am-analytics

wso2am_profile: wso2am

# State of the wso2am. Can be present or absent

wso2am_state: present

# Version of wso2am to deploy. You can use the keyword latest to install the
# latest available version

wso2am_version: latest

# Operating system user

wso2am_user: root

# Operating system group

wso2am_group: root

# Where to deploy

wso2am_dir: "/opt/{{ wso2am_profile }}"

# Maximum number of processes for wso2am process. Keep in mind that this
# limit must also be set via ulimit, as this value will only be added to systemd
# unit. Valid values: "unlimited" or number

wso2am_limit_nproc: "{{ 2**20 | int }}"

# Maximum number of file descriptors for wso2am process. Keep in mind that this
# limit must also be set via ulimit, as this value will only be added to systemd
# unit. Valid values: "unlimited" or number

wso2am_limit_no_file: "{{ 2**20 | int }}"

# Java related variables

wso2am_java_home: /usr/lib/jvm/jre

wso2am_java_opts:
  - "-Dwso2.name={{ inventory_hostname.split('.')[0] | lower }}"

wso2am_java_memory_opts:
  - "-Xms512m"
  - "-Xmx3072m"

# Dict wirh deployment settings. The format of the dict is the following:
#
# {
#   <section1>:
#     <option1>: <value1>
#     <option2>: <value2>
#     <optionN>: <valueN>
#   <section2>: ...
#   <sectionN>: ...
# }

wso2am_deployment:
  "[server]":
    hostname: "{{ inventory_hostname }}"
    node_ip: "{{ ansible_facts.default_ipv4.address }}"
    mode: single
    base_path: ${carbon.protocol}://${carbon.host}:${carbon.management.port}
    server_role: default

  "[super_admin]":
    username: admin
    password: admin
    create_admin_account: yes

  "[user_store]":
    type: database_unique_id

  "[database.apim_db]":
    type: h2
    url: >-
      {{ "jdbc:h2:./repository/database/WSO2AM_DB"
         + ";AUTO_SERVER=TRUE;DB_CLOSE_ON_EXIT=FALSE" }}
    username: wso2carbon
    password: wso2carbon

  "[database.shared_db]":
    type: h2
    url: jdbc:h2:./repository/database/WSO2SHARED_DB;DB_CLOSE_ON_EXIT=FALSE
    username: wso2carbon
    password: wso2carbon

  "[keystore.tls]":
    file_name: wso2carbon.jks
    type: JKS
    password: wso2carbon
    alias: wso2carbon
    key_password: wso2carbon

  "[[apim.gateway.environment]]":
    name: Production and Sandbox
    type: hybrid
    display_in_api_console: yes
    description: >-
      This is a hybrid gateway that handles both production and sandbox token
      traffic.
    show_as_token_endpoint_url: yes
    service_url: >-
      https://localhost:${mgt.transport.https.port}/services/
    username: ${admin.username}
    password: ${admin.password}
    ws_endpoint: ws://localhost:9099
    wss_endpoint: wss://localhost:8099
    http_endpoint: http://localhost:${http.nio.port}
    https_endpoint: https://localhost:${https.nio.port}

  "[apim.cors]":
    allow_origins: "*"
    allow_methods:
      - GET
      - PUT
      - POST
      - DELETE
      - PATCH
      - OPTIONS
    allow_headers:
      - authorization
      - Access-Control-Allow-Origin
      - Content-Type
      - SOAPAction
      - apikey
      - testKey
    allow_credentials: no

  "[[event_handler]]":
    name: userPostSelfRegistration
    subscriptions:
      - POST_ADD_USER

  "[service_provider]":
    sp_name_regex: ^[\\sa-zA-Z0-9._-]*$

  "[database.local]":
    url: "jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE"

  "[[event_listener]]":
    id: token_revocation
    type: org.wso2.carbon.identity.core.handler.AbstractIdentityHandler
    name: org.wso2.is.notification.ApimOauthEventInterceptor
    order: 1

  "[event_listener.properties]":
    notification_endpoint: >-
      https://localhost:${mgt.transport.https.port}/internal/data/v1/notify
    username: ${admin.username}
    password: ${admin.password}
    header.X-WSO2-KEY-MANAGER: default

# Extra args to use when generating keystore certificates

wso2am_keystore_keygen_extra_args:
  - "-sigalg SHA256withRSA"
  - "-keyalg RSA"
  - "-validity 3650"

# Indicate if the role must manage service state. May be useful to set it to no
# if you need to setup aditional stuff after setup before starting the service

wso2am_manage_service_state: yes

# Force install even if the role detects that it is not necessary

wso2am_force_install: no

# The role will try to identify the wso2am artifact to download from the
# official site.
#
# If you want to download the artifact from another repository yo need to
# configure the `wso2am_artifact` variable to point to a local/public repository
# that contains the required artifact
#
# Take a look to `amtega.artifact` role documentation to known about supported
# types of artifacts, their specific settings and how to configure a proxy if
# necessary

wso2am_artifact:
    type: https
    host: "{{ wso2am_official_download_host }}"
    path: "{{ wso2am_official_download_path }}"
    file: "{{ wso2am_official_download_file }}"
    dest: /tmp
    timeout: 120
    validate_certs: yes

# Hide sensitive information

wso2am_no_log: yes
