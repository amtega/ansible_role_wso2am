[server]
hostname = "{{ wso2am_hostname }}"
node_ip = "{{ wso2am_node_ip }}"
offset = "{{ wso2am_offset }}"
mode = "{{ wso2am_mode }}"
base_path = "Ì£{{ wso2am_base_path }}"
server_role = "{{ wso2am_server_role }}"

[super_admin]
username = "{{ wso2am_super_admin_username }}"
password = "{{ wso2am_super_admin_password }}"
create_admin_account = "{{ wso2am_super_admin_create_account | bool | lower }}"

[user_store]
type = "{{ wso2am_user_store_type }}"

{% for database in wsoam_databases %}
[database.{{ database.profile }}_db]
type = "{{ database.db_type }}"
url = "{{ database.db_url }}"
username = "{{ database.db_username }}"
password = "{{ database.db_password }}"
{% if database.db_driver is defined %}
driver = "{{ database.db_driver }}"
{% endif %}
validationQuery = "{{ database.db_validation_quey }}"
pool_options.maxActive = "{{ database.db_pool_max_active }}"
pool_options.logAbandoned = "{{ database.db_pool_log_abandoned }}"
pool_options.removeAbandoned = "{{ database.db_pool_remove_abandoned | bool | lower }}"
pool_options.removeAbandonedTimeout = "{{ database.db_pool_remove_abandoned_timeout }}"
{% endfor %}

[keystore.tls]
file_name = "{{ wso2am_keystore_file_name }}"
type = "{{ wso2am_keystore_type }}"
password = "{{ wso2am_keystore_password }}"
alias = "{{ wso2am_keystore_alias }}"
key_password = "{{ wso2am_keystore_key_password }}"

{% for ge in wso2am_gateway_environments %}
[[apim.gateway.environment]]
name = "{{ ge.name }}"
type = "{{ ge.type }}"
display_in_api_console = "{{ ge.display_in_api_console | bool | lower }}"
description = "{{ ge.description }}"
show_as_token_endpoint_url = "{{ ge.show_as_token_endpoint_url | bool | lower }}"
service_url = "{{ ge.service_url }}"
username = "{{ ge.username }}"
password = "{{ ge.password }}"
ws_endpoint = "{{ ge.ws_endpoint }}"
wss_endpoint = "{{ ge.wss_endpoint }}"
http_endpoint = "{{ ge.http_endpoint }}"
https_endpoint = "{{ ge.https_endpoint }}"
{% endfor %}

[apim.analytics]
enable = "{{ wso2am_analytics_enable | bool | lower }}"
store_api_url = "{{ wso2am_analytics_store_api_url }}"
username =  "{{ wso2am_analytics_username }}"
password =  "{{ wso2am_analytics_password }}"
event_publisher_type = "{{ wso2am_analytics_event_publisher_type }}"
event_publisher_impl = "{{ wso2am_analytics_event_publisher_impl }}"
publish_response_size =  "{{ wso2am_analytics_ publish_response_size | bool | lower }}"

{% for aug in wso2am_analytics_url_groups %}
[[apim.analytics.url_group]]
analytics_url: {{ aug.analytics_url | to_json }}
analytics_auth_url: {{ aug.analytics_auth_url | to_json }}
type: "{{ aug.type }}"
{% endfor %}

[apim.oauth_config]
set_jwt_as_opaque_token = "{{ wso2am_oauth_config_set_jwt_as_opaque_token | bool | lower }}"
enable_outbound_auth_header = "{{ wso2am_oauth_config_enable_outbound_auth_header | bool | lower }}"

[apim.devportal]
enable_key_provisioning = "{{ wso2am_devportal_enable_key_provisioning | bool | lower }}"
enable_application_sharing = "{{ wso2am_devportal_enable_application_sharing | bool | lower }}"

[apim.cors]
allow_origins = "{{ wso2am_cors_allow_origins }}"
allow_methods = {{ wso2am_cors_allow_origins | to_json }}
allow_headers = {{ wso2am_cors_allow_origins | to_json }}
allow_credentials = "{{ wso2am_cors_allow_origins | bool | lower }}"

[apim.throttling]
enable_data_publishing = "{{ wso2am_throttling_enable_data_publishing | bool | lower }}"
enable_policy_deploy = "{{ wso2am_throttling_enable_policy_deploy | bool | lower }}"
enable_blacklist_condition = "{{ wso2am_throttling_enable_blacklist_condition | bool | lower }}"
enable_persistence = "{{ wso2am_throttling_enable_persistence | bool | lower }}"
throttle_decision_endpoints = {{ wso2am_throttling_throttle_decision_endpoints | to_json }}

{% for tug in wso2am_throttling_url_groups %}
[[apim.throttling.url_group]]
traffic_manager_urls = {{ tug.traffic_manager_urls | to_json }}
traffic_manager_auth_urls = {{ tug.traffic_manager_auth_urls | to_json }}
{% endfor %}

{% for eh in wso2am_event_handlers %}
[[event_handler]]
name = "{{ eh.name }}"
subscriptions = {{ eh.subscriptions | to_json }}
{% endfor %}

[service_provider]
sp_name_regex = "{{ wso2am_service_provider_sp_name_regex }}"

[clustering]
membership_scheme: "{{ wso2am_clustering_membership_scheme }}"
domain: "{{ wso2am_clustering_domain }}"
local_member_host: "{{ wso2am_clustering_local_member_host }}"
local_member_port: "{{ wso2am_clustering_local_member_port }}"
members: {{ wso2am_clustering_members | to_json }}
shutdown_hook_enable: "{{ wso2am_clustering_shutdown_hook_enable | bool | lower }}"
logging_type: "{{ wso2am_clustering_logging_type }}"
